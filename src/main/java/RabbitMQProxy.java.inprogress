import com.rabbitmq.client.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.TimeoutException;

public class RabbitMQProxy {
    private final String host;
    private final int port;
    private final String username;
    private final String password;
    private Connection connection;
    private Channel channel;
    private String currentGroup;
    private String currentRecipient;
    private static final String FILE_TRANSFER_PREFIX = "file_transfer@";

    public RabbitMQProxy(String host, int port, String username, String password) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
    }

    public void connect() throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();

        factory.setHost(host);
        factory.setPort(port);

        factory.setUsername(username);
        factory.setPassword(password);

        connection = factory.newConnection();
        channel = connection.createChannel();
    }

    public void disconnect() throws IOException, TimeoutException {

        if (channel != null && channel.isOpen()) {
            channel.close();
        }
        if (connection != null && connection.isOpen()) {
            connection.close();
        }
    }

    public void declareExchange(String exchangeName) throws IOException {
        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT);
    }

    public void bindQueue(String queueName, String exchangeName) throws IOException {
        channel.queueBind(queueName, exchangeName, "");
    }

    public void sendGroupMessage(String group, byte[] message) throws IOException {
        channel.basicPublish(group, "", null, message);
    }

    public void sendDirectMessage(String recipient, byte[] message) throws IOException {
        channel.basicPublish("", recipient, null, message);
    }

    public void setCurrentGroup(String group) {
        this.currentGroup = group;
    }

    public void setCurrentRecipient(String recipient) {
        this.currentRecipient = recipient;
    }

    public void sendFileMessage(File file) throws IOException {
        String mimeType = Files.probeContentType(file.toPath());
        List<byte[]> chunks = MessageUtils.createFileMessage(username, currentGroup, file, mimeType);

        for (byte[] chunk : chunks) {
            if (currentGroup != null) {
                sendGroupMessage(FILE_TRANSFER_PREFIX + currentGroup, chunk);
            } else if (currentRecipient != null) {
                String whereTo = FILE_TRANSFER_PREFIX + currentRecipient;
                sendDirectMessage(whereTo, chunk);
            } else {
                throw new IllegalStateException(
                        "No recipient or group selected. Please select a recipient or group first.");
            }

        }
    }

    public void consumeMessages(String queueName, DeliverCallback deliverCallback) throws IOException {
        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {
        });
    }

    public String getExchangeList() throws IOException {
        // Implementation depends on how you're retrieving the exchange list from
        // RabbitMQ

        // This might involve using the RabbitMQ HTTP API or management plugin
        throw new UnsupportedOperationException("Exchange list retrieval not implemented");
    }
}
